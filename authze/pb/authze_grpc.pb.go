// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: authze.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthzedSVCClient is the client API for AuthzedSVC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthzedSVCClient interface {
	//添加权限
	AddPerm(ctx context.Context, in *AddPermRequest, opts ...grpc.CallOption) (*AddPermResponse, error)
	//更新权限
	UpdatePerm(ctx context.Context, in *UpdatePermRequest, opts ...grpc.CallOption) (*UpdatePermResponse, error)
	//删除权限
	DelPerm(ctx context.Context, in *DelPermRequest, opts ...grpc.CallOption) (*DelPermResponse, error)
	//读schema
	ReadSchema(ctx context.Context, in *ReadSchemaRequest, opts ...grpc.CallOption) (*ReadSchemaResponse, error)
	//写schema
	WriteSchema(ctx context.Context, in *WriteSchemaRequest, opts ...grpc.CallOption) (*WriteSchemaResponse, error)
}

type authzedSVCClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthzedSVCClient(cc grpc.ClientConnInterface) AuthzedSVCClient {
	return &authzedSVCClient{cc}
}

func (c *authzedSVCClient) AddPerm(ctx context.Context, in *AddPermRequest, opts ...grpc.CallOption) (*AddPermResponse, error) {
	out := new(AddPermResponse)
	err := c.cc.Invoke(ctx, "/authzed.v1.AuthzedSVC/AddPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzedSVCClient) UpdatePerm(ctx context.Context, in *UpdatePermRequest, opts ...grpc.CallOption) (*UpdatePermResponse, error) {
	out := new(UpdatePermResponse)
	err := c.cc.Invoke(ctx, "/authzed.v1.AuthzedSVC/UpdatePerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzedSVCClient) DelPerm(ctx context.Context, in *DelPermRequest, opts ...grpc.CallOption) (*DelPermResponse, error) {
	out := new(DelPermResponse)
	err := c.cc.Invoke(ctx, "/authzed.v1.AuthzedSVC/DelPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzedSVCClient) ReadSchema(ctx context.Context, in *ReadSchemaRequest, opts ...grpc.CallOption) (*ReadSchemaResponse, error) {
	out := new(ReadSchemaResponse)
	err := c.cc.Invoke(ctx, "/authzed.v1.AuthzedSVC/ReadSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzedSVCClient) WriteSchema(ctx context.Context, in *WriteSchemaRequest, opts ...grpc.CallOption) (*WriteSchemaResponse, error) {
	out := new(WriteSchemaResponse)
	err := c.cc.Invoke(ctx, "/authzed.v1.AuthzedSVC/WriteSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthzedSVCServer is the server API for AuthzedSVC service.
// All implementations must embed UnimplementedAuthzedSVCServer
// for forward compatibility
type AuthzedSVCServer interface {
	//添加权限
	AddPerm(context.Context, *AddPermRequest) (*AddPermResponse, error)
	//更新权限
	UpdatePerm(context.Context, *UpdatePermRequest) (*UpdatePermResponse, error)
	//删除权限
	DelPerm(context.Context, *DelPermRequest) (*DelPermResponse, error)
	//读schema
	ReadSchema(context.Context, *ReadSchemaRequest) (*ReadSchemaResponse, error)
	//写schema
	WriteSchema(context.Context, *WriteSchemaRequest) (*WriteSchemaResponse, error)
	mustEmbedUnimplementedAuthzedSVCServer()
}

// UnimplementedAuthzedSVCServer must be embedded to have forward compatible implementations.
type UnimplementedAuthzedSVCServer struct {
}

func (UnimplementedAuthzedSVCServer) AddPerm(context.Context, *AddPermRequest) (*AddPermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerm not implemented")
}
func (UnimplementedAuthzedSVCServer) UpdatePerm(context.Context, *UpdatePermRequest) (*UpdatePermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerm not implemented")
}
func (UnimplementedAuthzedSVCServer) DelPerm(context.Context, *DelPermRequest) (*DelPermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPerm not implemented")
}
func (UnimplementedAuthzedSVCServer) ReadSchema(context.Context, *ReadSchemaRequest) (*ReadSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSchema not implemented")
}
func (UnimplementedAuthzedSVCServer) WriteSchema(context.Context, *WriteSchemaRequest) (*WriteSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteSchema not implemented")
}
func (UnimplementedAuthzedSVCServer) mustEmbedUnimplementedAuthzedSVCServer() {}

// UnsafeAuthzedSVCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthzedSVCServer will
// result in compilation errors.
type UnsafeAuthzedSVCServer interface {
	mustEmbedUnimplementedAuthzedSVCServer()
}

func RegisterAuthzedSVCServer(s grpc.ServiceRegistrar, srv AuthzedSVCServer) {
	s.RegisterService(&AuthzedSVC_ServiceDesc, srv)
}

func _AuthzedSVC_AddPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzedSVCServer).AddPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authzed.v1.AuthzedSVC/AddPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzedSVCServer).AddPerm(ctx, req.(*AddPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzedSVC_UpdatePerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzedSVCServer).UpdatePerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authzed.v1.AuthzedSVC/UpdatePerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzedSVCServer).UpdatePerm(ctx, req.(*UpdatePermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzedSVC_DelPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzedSVCServer).DelPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authzed.v1.AuthzedSVC/DelPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzedSVCServer).DelPerm(ctx, req.(*DelPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzedSVC_ReadSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzedSVCServer).ReadSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authzed.v1.AuthzedSVC/ReadSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzedSVCServer).ReadSchema(ctx, req.(*ReadSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzedSVC_WriteSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzedSVCServer).WriteSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authzed.v1.AuthzedSVC/WriteSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzedSVCServer).WriteSchema(ctx, req.(*WriteSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthzedSVC_ServiceDesc is the grpc.ServiceDesc for AuthzedSVC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthzedSVC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authzed.v1.AuthzedSVC",
	HandlerType: (*AuthzedSVCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPerm",
			Handler:    _AuthzedSVC_AddPerm_Handler,
		},
		{
			MethodName: "UpdatePerm",
			Handler:    _AuthzedSVC_UpdatePerm_Handler,
		},
		{
			MethodName: "DelPerm",
			Handler:    _AuthzedSVC_DelPerm_Handler,
		},
		{
			MethodName: "ReadSchema",
			Handler:    _AuthzedSVC_ReadSchema_Handler,
		},
		{
			MethodName: "WriteSchema",
			Handler:    _AuthzedSVC_WriteSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authze.proto",
}
